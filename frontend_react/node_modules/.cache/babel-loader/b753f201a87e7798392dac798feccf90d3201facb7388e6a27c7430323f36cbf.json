{"ast":null,"code":"var _jsxFileName = \"/home/fabian/auto_gestor_usuarios/frontend_react/src/layout/DeveloperForm.jsx\",\n  _s = $RefreshSig$();\nimport '../css/index.css';\nimport { useEffect } from 'react';\nimport { backendUrl } from './Main.jsx';\n\n// useState de 'Aminadav Glickshtein' permite 3o parametro para obter estado atual da variavel\n// fazer isso com useState padrao do react é muito complicado\nimport useState from 'react-usestateref';\nimport { prepareLoadingAnimation } from '../js/utils.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DeveloperForm(props) {\n  _s();\n  // expressions (frases) no idioma atual e item do menu lateral que foi clicado\n  let expressions = props.expressions;\n\n  // contem o html o form atual\n  let [developer, setDeveloper, getDeveloper] = useState(null);\n\n  // obtem detalhes sobre qual registro editar\n  const {\n    operation,\n    recordId,\n    table\n  } = props;\n  let [isLoading, setIsLoading] = useState(true);\n\n  // carrega html do formulario\n  const fetchDeveloper = async () => {\n    // monta formulario\n    fetch(`${backendUrl}/developers/${recordId}`, {\n      method: \"GET\"\n    }).then(response => response.json()).then(data => {\n      setTimeout(() => {\n        setDeveloper(data);\n      }, 500);\n      setIsLoading(false);\n    }).catch(error => console.log('erro=' + error));\n  };\n  useEffect(() => {\n    prepareLoadingAnimation();\n\n    // carrega dados do developer atual\n    // força 1/2 segundo de parada para que usuario perceba que esta recarregando\n    if (getDeveloper.current == null) setIsLoading(true);\n    setTimeout(() => {\n      fetchDeveloper();\n    }, 500);\n  });\n\n  // fecha form de Crud\n  const closeCrudForm = event => {\n    // so fecha se clicou no backdrop\n    if (event.target === event.currentTarget) props.closeCrudForm();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [developer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backdropGray\",\n      onClick: closeCrudForm,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"crudForm\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col px-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"txtName\",\n            children: [\"s\", expressions.name, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"txtName\",\n            defaultValue: developer.name,\n            style: {\n              width: '100%'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 23\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backdropTransparent\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"divLoading\",\n        children: \"\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(DeveloperForm, \"HNpzKMHl2PBZnpV/xy9YeXh+DxI=\");\n_c = DeveloperForm;\nexport default DeveloperForm;\nvar _c;\n$RefreshReg$(_c, \"DeveloperForm\");","map":{"version":3,"names":["useEffect","backendUrl","useState","prepareLoadingAnimation","jsxDEV","_jsxDEV","Fragment","_Fragment","DeveloperForm","props","_s","expressions","developer","setDeveloper","getDeveloper","operation","recordId","table","isLoading","setIsLoading","fetchDeveloper","fetch","method","then","response","json","data","setTimeout","catch","error","console","log","current","closeCrudForm","event","target","currentTarget","children","className","onClick","htmlFor","name","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","style","width","id","_c","$RefreshReg$"],"sources":["/home/fabian/auto_gestor_usuarios/frontend_react/src/layout/DeveloperForm.jsx"],"sourcesContent":["\nimport '../css/index.css';\nimport {  useEffect } from 'react';\nimport {  backendUrl } from './Main.jsx';\n\n// useState de 'Aminadav Glickshtein' permite 3o parametro para obter estado atual da variavel\n// fazer isso com useState padrao do react é muito complicado\nimport useState from 'react-usestateref'\n\nimport { prepareLoadingAnimation  } from '../js/utils.js';\n\n\nfunction DeveloperForm( props )    {\n\n    \n    // expressions (frases) no idioma atual e item do menu lateral que foi clicado\n    let expressions = props.expressions\n\n    // contem o html o form atual\n    let [developer, setDeveloper, getDeveloper] = useState(null)\n\n    // obtem detalhes sobre qual registro editar\n    const {operation, recordId, table} = props;\n\n    let [isLoading, setIsLoading] = useState(true)\n\n\n    // carrega html do formulario\n    const fetchDeveloper = async () =>  {\n        // monta formulario\n        fetch(`${backendUrl}/developers/${recordId}`, { method: \"GET\" })\n        .then((response) => response.json())\n        .then((data) => {\n            setTimeout(() => {\n            setDeveloper(data)  \n            }, 500);\n\n          setIsLoading(false)\n        })\n        .catch((error) => console.log('erro='+error));\n    }\n\n    useEffect( () => {\n        prepareLoadingAnimation()\n\n        // carrega dados do developer atual\n        // força 1/2 segundo de parada para que usuario perceba que esta recarregando\n        if ( getDeveloper.current == null )    \n          setIsLoading(true)\n\n          setTimeout(() => {\n            fetchDeveloper()    \n          }, 500);\n    } )\n\n  // fecha form de Crud\n  const closeCrudForm = event => {\n    // so fecha se clicou no backdrop\n    if (event.target === event.currentTarget) props.closeCrudForm()\n  }\n\n\n    return(\n\n        <>\n\n            { developer && \n              <div className='backdropGray'  onClick={closeCrudForm}>     \n\n                  <div className='crudForm'>\n\n                      <div className='flex flex-col px-3'>\n                        <label htmlFor='txtName'>s{ expressions.name} </label>\n                        <input name='txtName' defaultValue={ developer.name }  style={{ width: '100%'}} />\n                      </div>\n\n                  </div>\n              </div>\n\n\n            }\n\n            {/* animacao 'carregando...' */}\n            { isLoading && \n                <div className='backdropTransparent'  >\n                  <div id='divLoading' >&nbsp;</div>\n                </div>\n            }\n\n\n      </>\n    )  \n}\n\nexport default DeveloperForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}