{"ast":null,"code":"var _jsxFileName = \"/home/fabian/auto_gestor_usuarios/frontend_react/src/layout/Main.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, createContext } from 'react';\n\n// useState de 'Aminadav Glickshtein' permite 3o parametro para obter estado atual da variavel\n// fazer isso com useState padrao do react é muito complicado\nimport useState from 'react-usestateref';\nimport '../css/index.css';\nimport Header from './Header';\nimport Datatable from './Datatable';\nimport Sidebar from './Sidebar.jsx';\nimport $ from 'jquery';\nimport 'jquery-ui-bundle';\nimport 'jquery-ui-bundle/jquery-ui.min.css';\nimport { prepareLoadingAnimation } from '../js/utils.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SharedContext = /*#__PURE__*/createContext();\n\n//export const backendUrl = 'http://ec2-54-94-203-105.sa-east-1.compute.amazonaws.com:8071'\nexport const backendUrl = 'http://localhost:3001';\nfunction Main() {\n  _s();\n  // controla se o idioma inglês esta selecionado no momento (via checkbox)\n  let [isUSAChecked, setUSAChecked, getUSAChecked] = useState(true);\n\n  // controla backend atual\n  let [currentBackend, setCurrentBackend] = useState('laravel');\n\n  // controla item do menu lateral (sidebar) atualmente clicado\n  let [currentMenuItem, setCurrentMenuItem] = useState('itemMenuDevelopers');\n  let [isLoading, setIsLoading] = useState(true);\n\n  // expressoes/frases usadas dependendo do idioma selecionado\n  let [expressions, setExpressions, getExpressions] = useState(null);\n\n  // usuario mudou idioma atual em Header.jsx, recarrega \n  const changeLanguageAndReload = isUSAChecked => {\n    setIsLoading(true);\n    setUSAChecked(isUSAChecked); // define novo idioma que foi recebido de 'Header.jsx'\n    setExpressions(null); // dispara useEffect \n  };\n\n  // usuario mudou backend em header.jsx, recarrega \n  const changeBackendAndReload = backend => {\n    setCurrentBackend(backend);\n    setExpressions(null); // dispara useEffect \n  };\n  const fetchExpressions = async () => {\n    let _isUSAChecked = getUSAChecked.current;\n    let language = _isUSAChecked ? 'english' : 'portuguese';\n    fetch(`${backendUrl}/expressions/${language}`).then(response => response.json()).then(data => {\n      setExpressions(data);\n      setIsLoading(false);\n    }).catch(error => console.log('erro=' + error));\n  };\n  useEffect(() => {\n    prepareLoadingAnimation();\n\n    // carrega expressoes do idioma atual\n    // força 1/2 segundo de parada para que usuario perceba que esta recarregando\n    // necessario testar de 'expressions' nulo, se nao react executa useEffect sem parar\n    if (getExpressions.current == null) setTimeout(() => {\n      fetchExpressions();\n    }, 500);\n  }, [expressions]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Content\",\n      children: /*#__PURE__*/_jsxDEV(SharedContext.Provider, {\n        value: {\n          _expressions: expressions,\n          _isUSAChecked: isUSAChecked,\n          _currentBackend: currentBackend,\n          _currentMenuItem: currentMenuItem\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Sidebar\",\n          children: /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Main\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Header\",\n            children: [isLoading && /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this), expressions && /*#__PURE__*/_jsxDEV(Header, {\n              onChangeLanguage: changeLanguageAndReload,\n              onChangeBackend: changeBackendAndReload\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Datatable\",\n            children: expressions && /*#__PURE__*/_jsxDEV(Datatable, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 34\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backdropTransparent\",\n      style: {\n        visibility: isLoading ? 'visible' : 'hidden'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"divLoading\",\n        children: \"\\xA0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Main, \"LyK7XAw2LXoPGSy+0RDg1nYNGA8=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useEffect","createContext","useState","Header","Datatable","Sidebar","$","prepareLoadingAnimation","jsxDEV","_jsxDEV","Fragment","_Fragment","SharedContext","backendUrl","Main","_s","isUSAChecked","setUSAChecked","getUSAChecked","currentBackend","setCurrentBackend","currentMenuItem","setCurrentMenuItem","isLoading","setIsLoading","expressions","setExpressions","getExpressions","changeLanguageAndReload","changeBackendAndReload","backend","fetchExpressions","_isUSAChecked","current","language","fetch","then","response","json","data","catch","error","console","log","setTimeout","children","className","Provider","value","_expressions","_currentBackend","_currentMenuItem","fileName","_jsxFileName","lineNumber","columnNumber","onChangeLanguage","onChangeBackend","style","visibility","id","_c","$RefreshReg$"],"sources":["/home/fabian/auto_gestor_usuarios/frontend_react/src/layout/Main.jsx"],"sourcesContent":["\nimport { useEffect, createContext  } from 'react';\n\n\n// useState de 'Aminadav Glickshtein' permite 3o parametro para obter estado atual da variavel\n// fazer isso com useState padrao do react é muito complicado\nimport useState from 'react-usestateref'\nimport '../css/index.css';\n\nimport Header from './Header';\nimport Datatable from './Datatable';\nimport Sidebar from './Sidebar.jsx';\n\nimport $ from 'jquery'\n\nimport 'jquery-ui-bundle';\nimport 'jquery-ui-bundle/jquery-ui.min.css';\n\nimport { prepareLoadingAnimation  } from '../js/utils.js';\n\nexport const SharedContext = createContext();\n\n//export const backendUrl = 'http://ec2-54-94-203-105.sa-east-1.compute.amazonaws.com:8071'\nexport const backendUrl = 'http://localhost:3001'\n\nfunction Main() {\n\n  // controla se o idioma inglês esta selecionado no momento (via checkbox)\n  let [isUSAChecked, setUSAChecked, getUSAChecked] = useState(true)\n\n  // controla backend atual\n  let [currentBackend, setCurrentBackend] = useState('laravel')\n\n  // controla item do menu lateral (sidebar) atualmente clicado\n  let [currentMenuItem, setCurrentMenuItem] = useState('itemMenuDevelopers')\n\n  let [isLoading, setIsLoading] = useState(true)\n\n  // expressoes/frases usadas dependendo do idioma selecionado\n  let [expressions, setExpressions, getExpressions] = useState(null)\n  \n\n  // usuario mudou idioma atual em Header.jsx, recarrega \n  const changeLanguageAndReload = ( isUSAChecked ) => {\n    setIsLoading(true)\n    setUSAChecked(isUSAChecked)   // define novo idioma que foi recebido de 'Header.jsx'\n    setExpressions(null)   // dispara useEffect \n  } \n\n  // usuario mudou backend em header.jsx, recarrega \n  const changeBackendAndReload = ( backend ) => {    \n    setCurrentBackend(backend)   \n    setExpressions(null)   // dispara useEffect \n  } \n\n\n\n  const fetchExpressions = async () =>  {\n    let _isUSAChecked = getUSAChecked.current\n    let language = _isUSAChecked ? 'english' : 'portuguese';\n\n    fetch(`${backendUrl}/expressions/${language}`)\n    .then((response) => response.json())\n    .then((data) => {\n      setExpressions(data);\n      setIsLoading(false)  \n    })\n    .catch((error) => console.log('erro='+error));\n  }\n\n  useEffect( () => {      \n      prepareLoadingAnimation()  \n  \n      // carrega expressoes do idioma atual\n      // força 1/2 segundo de parada para que usuario perceba que esta recarregando\n      // necessario testar de 'expressions' nulo, se nao react executa useEffect sem parar\n      if ( getExpressions.current == null )    \n        setTimeout(() => {\n          fetchExpressions()    \n        }, 500);\n  }, [expressions])\n\n\n  return (\n\n    <>\n\n    <div className=\"Content\">\n\n      {/* context => compartilha idioma, expressoes e backend  atual entre os componentes */}\n      <SharedContext.Provider \n        value={{ \n            _expressions: expressions, \n            _isUSAChecked: isUSAChecked, \n            _currentBackend: currentBackend, \n            _currentMenuItem: currentMenuItem  }}  >\n\n          {/* barra lateral esquerda */}\n          <div className='Sidebar'>\n                <Sidebar  />\n          </div>\n\n          {/* header e datatable */}\n          <div className=\"Main\">\n\n              <div className='Header'>\n                {/* se esta carregando expressoes ainda, carrega Header sem dados, só parte visual */}\n                { isLoading && \n                  <Header  /> }\n\n                {/* se ja carregou expressoes, carrega Header com as frases do idiomas atual */}\n                { expressions && \n                  <Header                 \n                    onChangeLanguage={changeLanguageAndReload}                 \n                    onChangeBackend={changeBackendAndReload} \n                  /> }\n\n              </div>\n\n              <div className='Datatable'>\n                { expressions && <Datatable   /> }\n              </div>\n\n          </div>\n\n      </SharedContext.Provider>\n\n    </div>    \n\n    {/* animacao 'carregando...' */}\n    { isLoading && \n        <div className='backdropTransparent' style={{ visibility: isLoading ? 'visible' : 'hidden' }} >\n          <div id='divLoading' >&nbsp;</div>\n        </div>\n    }\n\n    </>\n\n\n\n  );\n}\n\nexport default Main;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}